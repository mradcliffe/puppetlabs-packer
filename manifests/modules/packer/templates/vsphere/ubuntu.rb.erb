#!/usr/bin/ruby

hostname = `vmtoolsd --cmd "info-get guestinfo.hostname"`

hostname = hostname.chomp

puts "Nice to meet you, my VM name is '#{hostname}'."
 
puts "\n"
 
puts '- Setting local hostname...'
 
File.open('/etc/hostname', 'w') do |f|
  f.write(hostname)
end
 
<% if ['18.04', '18.10', '20.04'].include? @operatingsystemrelease -%>
# systemd-networkd
Kernel.system("/usr/bin/hostnamectl set-hostname #{hostname}")
<% else -%>
# NetworkManager
Kernel.system('hostname -F /etc/hostname')
dhc = File.read('/etc/dhcp/dhclient.conf')
File.open('/etc/dhcp/dhclient.conf', 'w') do |f|
  <% if ['15.10', '16.04', '16.10'].include? @operatingsystemrelease -%>
  dhc.gsub!(/^(send host-name.*)/, "send host-name \"#{hostname}\";")
  <% else -%>
  dhc.gsub!(/^(#?send host-name.*)/, "send host-name \"#{hostname}\";")
  <% end -%>
  f.write(dhc)
end
<% end -%>

File.open('/etc/hosts', 'w') do |f|
  f.puts "127.0.0.1 localhost"
  f.puts "127.0.1.1 #{hostname}"
end
 
puts '- Re-obtaining DHCP lease...'
 
<% if ['15.10', '16.04', '16.10'].include? @operatingsystemrelease -%>
# NetworkManager
Kernel.system('/usr/sbin/service networking restart')
<% elsif ['18.04', '18.10', '20.04'].include? @operatingsystemrelease -%>
# netplan uses machine-id or client-it as identifier by default, but we need a different value for
# each VM, so configure netplan's dhcp to use mac addresses
#open('/etc/netplan/01-netcfg.yaml', 'a') { |f|
#  f.puts "      dhcp-identifier: mac"
#}

# NOTE: not needed anymore, disable systemd-resolved - more info here: https://tickets.puppetlabs.com/browse/QENG-6928
# see superseding ticket IMAGES-1217
# Kernel.system('rm /etc/resolv.conf')
# Kernel.system('ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf')

Kernel.system('/bin/systemctl restart systemd-networkd')
<% else -%>
Kernel.system('/sbin/ifdown eth0 && /sbin/ifup eth0')
<% end -%>
 
puts '- Cleaning up...'

<% if ['18.04', '18.10', '20.04'].include? @operatingsystemrelease -%>
# With systemd-networkd, disable the oneshot service that runs this script:
Kernel.system('/bin/systemctl disable vsphere.bootstrap.service')
<% else -%>
# With NetworkManager, /etc/rc.local is what runs this script; Make it a noop after the first run:
Kernel.system('echo "exit 0" > /etc/rc.local')
<% end -%>

puts "\n"

puts 'Done!'
